package com.example.sds.myapplication;import android.app.Activity;import android.app.AlertDialog;import android.bluetooth.BluetoothAdapter;import android.bluetooth.BluetoothDevice;import android.bluetooth.BluetoothSocket;import android.content.DialogInterface;import android.content.Intent;import android.os.AsyncTask;import android.os.Bundle;import android.util.Log;import android.view.View;import android.widget.Button;import android.widget.ImageView;import android.widget.TextView;import android.widget.Toast;import java.io.IOException;import java.io.InputStream;import java.io.OutputStream;import java.util.Set;import java.util.UUID;public class BlueToothMainActivity extends Activity implements View.OnClickListener {    //BlueTooth Request 체크를 위한 변수    private final int REQUEST_BLUETOOTH_ENABLE = 100;    private TextView mConnectionStatus;    //Connect 에러 체크를 위한 변수    static boolean isConnectionError = false;    ConnectedTask mConnectedTask = null;    static BluetoothAdapter mBluetoothAdapter;    private String mConnectedDeviceName = null;    private static final String TAG = "BluetoothClient";    //Layout 지정 변수    private Button btn_Connect, btn_Send1, btn_Send2;    private TextView txt_Result, txt_rcvResult;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_bluetooth_main);        btn_Connect = (Button)findViewById(R.id.btn_connect);        txt_Result = (TextView)findViewById(R.id.txt_result);        btn_Send1 = (Button) findViewById(R.id.btn_send1);        btn_Send2 = (Button) findViewById(R.id.btn_send2);        txt_rcvResult = (TextView) findViewById(R.id.txt_rcvResut);        btn_Connect.setOnClickListener(this);        btn_Send1.setOnClickListener(this);        btn_Send2.setOnClickListener(this);    }    @Override    public void onClick(View v) {        if(v==btn_Send1) {            Log.d("bluetooth Test", "1");            showErrorDialog("111111111");            sendMessage("1");        }else if(v ==btn_Send2){            Log.d("bluetooth Test", "2");            showErrorDialog("22222222222222");            sendMessage("2");        }        if(v==btn_Connect) {            mConnectionStatus = (TextView) findViewById(R.id.txt_result);            Log.d(TAG, "Initalizing Bluetooth adapter...");            //1.블루투스 사용 가능한지 검사합니다.            mBluetoothAdapter = BluetoothAdapter.getDefaultAdapter();            if (mBluetoothAdapter == null) {                showErrorDialog("This device is not implement Bluetooth.");                return;            }            if (!mBluetoothAdapter.isEnabled()) {                Intent intent = new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);                startActivityForResult(intent, REQUEST_BLUETOOTH_ENABLE);            } else {                Log.d(TAG, "Initialisation successful.");                //2. 페어링 되어 있는 블루투스 장치들의 목록을 보여줍니다.                //3. 목록에서 블루투스 장치를 선택하면 선택한 디바이스를 인자로 하여                //   doConnect 함수가 호출됩니다.                showPairedDevicesListDialog();            }        }    }    //블루투스 연결 완료시 Pair된 기기를 보여주는 메소드    private void showPairedDevicesListDialog() {        Set<BluetoothDevice> devices = mBluetoothAdapter.getBondedDevices();        final BluetoothDevice[] pairedDevices = devices.toArray(new BluetoothDevice[0]);        if ( pairedDevices.length == 0 ){            showQuitDialog( "No devices have been paired.\n"                    +"You must pair it with another device.");            return;        }        String[] items;        items = new String[pairedDevices.length];        for (int i=0;i<pairedDevices.length;i++) {            items[i] = pairedDevices[i].getName();        }        AlertDialog.Builder builder = new AlertDialog.Builder(this);        builder.setTitle("Select device");        builder.setCancelable(false);        builder.setItems(items, new DialogInterface.OnClickListener() {            @Override            public void onClick(DialogInterface dialog, int which) {                dialog.dismiss();                // 블루투스가 기존에 연결되었던 list가 뜨면서 여기서 선택                // Attempt to connect to the device                ConnectTask task = new ConnectTask(pairedDevices[which]);                task.execute();            }        });        builder.create().show();    }    //runs while listening for incoming connections.    private class ConnectTask extends AsyncTask<Void, Void, Boolean> {     /////// Connect        private BluetoothSocket mBluetoothSocket = null;        private BluetoothDevice mBluetoothDevice = null;        ConnectTask(BluetoothDevice bluetoothDevice) {            mBluetoothDevice = bluetoothDevice;            mConnectedDeviceName = bluetoothDevice.getName();            //SPP            UUID uuid = UUID.fromString("00001101-0000-1000-8000-00805f9b34fb");            // Get a BluetoothSocket for a connection with the            // given BluetoothDevice            try {                mBluetoothSocket = mBluetoothDevice.createRfcommSocketToServiceRecord(uuid);                Log.d( TAG, "create socket for "+mConnectedDeviceName);            } catch (IOException e) {                Log.e( TAG, "socket create failed " + e.getMessage());            }            mConnectionStatus.setText("connecting...");        }        @Override        protected Boolean doInBackground(Void... params) {            // Always cancel discovery because it will slow down a connection            mBluetoothAdapter.cancelDiscovery();            // Make a connection to the BluetoothSocket            try {                // This is a blocking call and will only return on a                // successful connection or an exception                mBluetoothSocket.connect();            } catch (IOException e) {                // Close the socket                try {                    mBluetoothSocket.close();                } catch (IOException e2) {                    Log.e(TAG, "unable to close() " +                            " socket during connection failure", e2);                }                return false;            }            return true;        }        @Override        protected void onPostExecute(Boolean isSucess) {            if ( isSucess ) {                Log.d( TAG, "onPostExecute");                connected(mBluetoothSocket);            }            else{                isConnectionError = true;                Log.d( TAG,  "Unable to connect device");                showErrorDialog("Unable to connect device");            }        }    }    //// 여기까지 ConnectTask    public void connected( BluetoothSocket socket ) {        mConnectedTask = new ConnectedTask(socket);        mConnectedTask.execute();    }    protected class ConnectedTask extends AsyncTask<Void, String, Boolean> {             ///////// Connected Task        private InputStream mInputStream = null;        private OutputStream mOutputStream = null;        private BluetoothSocket mBluetoothSocket = null;        final ImageView img1 = (ImageView) findViewById(R.id.number);        ConnectedTask(BluetoothSocket socket){            mBluetoothSocket = socket;            try {                mInputStream = mBluetoothSocket.getInputStream();                mOutputStream = mBluetoothSocket.getOutputStream();            } catch (IOException e) {                Log.e(TAG, "socket not created", e );            }            Log.d( TAG, "connected to "+mConnectedDeviceName);            mConnectionStatus.setText( "Connected");            img1.setVisibility(View.INVISIBLE);        }        @Override        protected Boolean doInBackground(Void... params) {            byte [] readBuffer = new byte[1024];            int readBufferPosition = 0;            // Keep listening to the InputStream while connected            while (true) {                if ( isCancelled() ) return false;                try {                    int bytesAvailable = mInputStream.available();                    if(bytesAvailable > 0) {                        byte[] packetBytes = new byte[bytesAvailable];                        // Read from the InputStream                        mInputStream.read(packetBytes);                        for(int i=0;i<bytesAvailable;i++) {                            byte b = packetBytes[i];                            if(b == '\n')                            {                                byte[] encodedBytes = new byte[readBufferPosition];                                System.arraycopy(readBuffer, 0, encodedBytes, 0,                                        encodedBytes.length);                                String recvMessage = new String(encodedBytes, "UTF-8");                                readBufferPosition = 0;                                Log.d(TAG, "recv message: " + recvMessage);                                txt_rcvResult.setText(recvMessage);                                publishProgress(recvMessage);                            }                            else                            {                                readBuffer[readBufferPosition++] = b;                            }                        }                    }                } catch (IOException e) {                    Log.e(TAG, "disconnected", e);                    return false;                }            }        }//        @Override//        protected void onProgressUpdate(String... recvMessage) {////            mConversationArrayAdapter.insert(mConnectedDeviceName + ": " + recvMessage[0], 0);//        }        @Override        protected void onPostExecute(Boolean isSucess) {            super.onPostExecute(isSucess);            if ( !isSucess ) {                closeSocket();                Log.d(TAG, "Device connection was lost");                isConnectionError = true;                showErrorDialog("Device connection was lost");            }        }        @Override        protected void onCancelled(Boolean aBoolean) {            super.onCancelled(aBoolean);            closeSocket();        }        void closeSocket(){            try {                mBluetoothSocket.close();                Log.d(TAG, "close socket()");            } catch (IOException e2) {                Log.e(TAG, "unable to close() " +                        " socket during connection failure", e2);            }        }        void write(String msg){//            msg += "\n";            try {                mOutputStream.write(msg.getBytes());                mOutputStream.flush();            } catch (IOException e) {                Log.e(TAG, "Exception during send", e );            }//            mInputEditText.setText(" ");        }    }        // 블루투스 연결 중 에러메세지 보여주는 메소드    public void showErrorDialog(String message)    {        AlertDialog.Builder builder = new AlertDialog.Builder(this);        builder.setTitle("Quit");        builder.setCancelable(false);        builder.setMessage(message);        builder.setPositiveButton("OK",  new DialogInterface.OnClickListener() {            @Override            public void onClick(DialogInterface dialog, int which) {                dialog.dismiss();                if ( isConnectionError  ) {                    isConnectionError = false;                    finish();                }            }        });        builder.create().show();    }    public void showQuitDialog(String message)               // 블루투스 연결 중 종료메세지 보여주기    {        AlertDialog.Builder builder = new AlertDialog.Builder(this);        builder.setTitle("Quit");        builder.setCancelable(false);        builder.setMessage(message);        builder.setPositiveButton("OK",  new DialogInterface.OnClickListener() {            @Override            public void onClick(DialogInterface dialog, int which) {                dialog.dismiss();                finish();            }        });        builder.create().show();    }    boolean sendMessage(String msg){        if ( mConnectedTask != null ) {            mConnectedTask.write(msg);            Log.d(TAG, "send message: " + msg);            return true;        }else return false;    }}
